{{- if and (.Values.enabled) (.Values.importer.enabled) }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: importer-dep
  namespace: {{ .Release.Namespace }}
  labels:
    namespace: {{ .Release.Namespace }}
    tier: backend
    backstage.io/kubernetes-id: {{ .Values.app_code }}
spec:
  replicas: {{ required "REQUIRED: importer.replicas" .Values.importer.replicas }}
  selector:
    matchLabels:
      app: importer-dep
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        container.apparmor.security.beta.kubernetes.io/importer: runtime/default
        container.seccomp.security.alpha.kubernetes.io/importer: runtime/default
      labels:
        app: importer-dep
        namespace: {{ .Release.Namespace }}
        tier: backend
        backstage.io/kubernetes-id: {{ .Values.app_code }}
    spec:
      tolerations:
      {{- if .Values.non_preemptible }}
      - key: general
      {{- else }}
      - key: preemptible
      {{- end }}
        operator: Equal
        value: "true"
        effect: PreferNoSchedule

      hostIPC: false
      hostNetwork: false
      hostPID: false
      securityContext:
        runAsUser: 115
        runAsGroup: 125
        fsGroup: 190
        supplementalGroups:
          - 150

      volumes:
        {{- if .Values.google.key }}
        - name: json-credentials
          secret:
            secretName: json-credentials
        {{- end }}
        - name: tmp-dir
          emptyDir: {}
        - name: usr-tmp-dir
          emptyDir: {}
        - name: var-tmp-dir
          emptyDir: {}

      serviceAccountName: {{ include "ksa_name" . }}
      restartPolicy: Always
      containers:
      - name: importer
        image: {{ include "importer_image" . }}
        imagePullPolicy: Always

        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          procMount: default
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault

        resources:
          requests:
            memory: {{ required "REQUIRED: importer.memory.request" .Values.importer.memory.request }}
            cpu: {{ required "REQUIRED: importer.cpu.request" .Values.importer.cpu.request }}
          limits:
            memory: {{ required "REQUIRED: importer.memory.limit" .Values.importer.memory.limit }}
            cpu: {{ required "REQUIRED: importer.cpu.limit" .Values.importer.cpu.limit }}

        volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
          - mountPath: /usr/tmp
            name: usr-tmp-dir
          - mountPath: /var/tmp
            name: var-tmp-dir

        {{- if ne .Values.app_code "boatload" }}
        livenessProbe:
          httpGet:
            path: {{ .Values.importer.healthCheckPath }}
            port: {{ .Values.importer.containerPort }}
          initialDelaySeconds: 30
          periodSeconds: 15

        readinessProbe:
          httpGet:
            path: {{ .Values.importer.healthCheckPath }}
            port: {{ .Values.importer.containerPort }}
          initialDelaySeconds: 30
          periodSeconds: 15
        {{- end }}

        env:
        - name: LIFECYCLE
          value: {{ include "lifecycle" $ }}
        - name: IS_LOCAL
          value: "false"
        - name: USE_GCS
          value: "true"
        - name: DOMAIN
          value: {{ include "subdomain" $ }}

        {{- if .Values.importer.env }}
{{- toYaml .Values.importer.env | nindent 8 }}
        {{- end }}

        {{- if .Values.jwt.enabled }}
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key
        {{- end }}

        {{- if .Values.google.maps.enabled }}
        - name: GOOGLE_MAPS_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: maps-key
        {{- end }}

        {{- if .Values.sendgrid.enabled }}
        - name: SENDGRID_EMAIL
          value: {{ .Values.sendgrid.email }}

        - name: SENDGRID_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: sendgrid-key
        {{- end }}

        {{- if .Values.db.proxy }}
        - name: DB_VENDOR
          value: "postgres"
        - name: DB_NAME
          value: {{ include "db_name" . }}
        - name: DB_USER
          value: {{ include "app_sa" . }}
        - name: DB_PASSWORD
          value: fake-password
        {{- end }}

        {{- if .Values.postgres.enabled }}
        - name: DB_VENDOR
          value: "postgres"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: crunchydb-pguser-crunchydb
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: crunchydb-pguser-crunchydb
              key: port
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: crunchydb-pguser-crunchydb
              key: dbname
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: crunchydb-pguser-crunchydb
              key: user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: crunchydb-pguser-crunchydb
              key: password
        {{- end }}

        {{- if .Values.twilio.enabled }}
        - name: TWILIO_NUMBER
          value: '{{ required "REQUIRED: twilio.number" .Values.twilio.number }}'

        - name: TWILIO_REPLY_NUMBER
          value: '{{ required "REQUIRED: twilio.reply_number" .Values.twilio.reply_number }}'

        - name: TWILIO_ACCOUNT_SID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: twilio-account-sid

        - name: TWILIO_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: twilio-auth-token
        {{- end }}

        {{- if .Values.airtable.enabled }}
        - name: BASE_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: base-id
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: api-key
        {{- end }}

        ports:
        - containerPort: {{ .Values.importer.containerPort }}
          name: importer-port

      {{- if .Values.db.proxy }}
      - name: proxy
        image: "{{ .Values.db.proxy_version }}"
        imagePullPolicy: Always
        command:
        - /cloud_sql_proxy
        - -instances={{- include "db_project" . -}}:{{- required "REQUIRED: google.region" .Values.google.region -}}:{{- include "instance_name" . }}=tcp:127.0.0.1:5432
        - -enable_iam_login

        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          procMount: default
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      {{- end }}

{{- end }}


