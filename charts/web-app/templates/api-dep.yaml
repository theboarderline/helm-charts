{{- if and (.Values.enabled) (.Values.api.enabled) }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-dep
  labels:
    app: api-dep
    tier: backend
spec:
  replicas: {{ required "API Replicas required" .Values.api.replicas }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: api-dep
  template:
    metadata:
      labels:
        app: api-dep
    spec:
      {{- if .Values.api.use_pd }}
      volumes:
        - name: gce-volume
          persistentVolumeClaim:
            claimName: gce-pvc
      {{- end }}

      serviceAccountName: {{ .Release.Namespace -}}-sa
      restartPolicy: Always
      containers:
      - name: api
        image: {{ include "api_image" . }}
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
        resources:
          requests:
            memory: {{ required "API Memory Requests Required" .Values.api.memory.request }}
            cpu: {{ required "API CPU Requests Required" .Values.api.cpu.request }}
          limits:
            memory: {{ required "API Memory Limits Required" .Values.api.memory.limit }}
            cpu: {{ required "API CPU Limits Required" .Values.api.cpu.limit }}

        {{- if .Values.api.use_pd }}
        volumeMounts:
          - mountPath: /backend/var
            name: gce-volume
        {{- end }}

        {{- if ne .Release.Namespace "boatload" }}
        livenessProbe:
          httpGet:
            path: /api/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10

        readinessProbe:
          httpGet:
            path: /api/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        {{- end }}

        {{- if .Values.db.init }}
        command: ["/bin/sh"]
        args: ["-c", "./bin/init_db.sh && gunicorn -b 0.0.0.0:8000 {{ .Values.api.label -}}.wsgi"]
        {{- end }}

        env:
        - name: LIFECYCLE
          value: {{ .Values.lifecycle }}
        - name: USE_GCS
          value: "true"
        - name: DOMAIN
          value: {{ include "domain" . }}
        - name: STATIC_BUCKET
          value: {{ include "bucket" . }}
        - name: PRIVATE_BUCKET
          value: {{ include "private_bucket" . }}

        {{- if .Values.gin.enabled }}
        - name: GIN_MODE
          value: release
        {{- end }}

        {{- if .Values.input_path }}
        - name: INPUT_PATH
          value: {{ .Values.input_path }}
        {{- end }}

        {{- if .Values.django.enabled }}
        {{- if .Values.django.email }}
        - name: DJANGO_EMAIL
          value: {{ .Values.django.email }}
        {{- end }}

        - name: DJANGO_KEY
        {{- if .Values.secrets.enabled }}
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: django-key
        {{- else }}
          value: fake-django-key
        {{- end }}

        {{- if .Values.django.use_email }}
        - name: EMAIL_PASSWORD
        {{- if .Values.secrets.enabled }}
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: email-password
        {{- else }}
          value: {{ required "REQUIRED: django.email_password" .Values.django.email_password }}
        {{- end }}
        {{- end }}

        {{- if .Values.django.oauth_id }}
        - name: OAUTH_ID
          value: {{ .Values.django.oauth_id }}

        - name: OAUTH_SECRET
        {{- if .Values.secrets.enabled }}
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: oauth-secret
        {{- else }}
          value: {{ required "REQUIRED: django.oauth_secret" .Values.django.oauth_secret }}
        {{- end }}
        {{- end }}

        {{- end }}

        {{- if .Values.sendgrid.enabled }}
        - name: SENDGRID_EMAIL
          value: {{ .Values.sendgrid.email }}

        - name: SENDGRID_KEY
        {{- if .Values.secrets.enabled }}
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: sendgrid-key
        {{- else }}
          value: {{ required "REQUIRED: sendgrid.key" .Values.sendgrid.key }}
        {{- end }}

        {{- end }}

        {{- if .Values.db.proxy }}
        - name: USE_PROXY
          value: "true"
        - name: DB_NAME
          value: {{ include "db_name" . }}
        - name: DB_USER
          value: {{ include "app_sa" . }}
        {{- end }}

        {{- if .Values.agile.enabled }}
        - name: AGILE_CRM_REST_KEY
        {{- if .Values.secrets.enabled }}
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: agile-crm-rest-key
        {{- else }}
          value: {{ required "REQUIRED: agile.key" .Values.agile.key }}
        {{- end }}
        {{- end }}

        {{- if .Values.twilio.enabled }}
        - name: TWILIO_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: twilio-auth-token
        - name: TWILIO_ACCOUNT_SID
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: twilio-account-sid

        {{- if eq .Release.Namespace "coleman" }}
        - name: TWILIO_NUMBER_IL
          value: '{{ required "IL Phone number required for CGS" .Values.twilio.numbers.il }}'
        - name: TWILIO_NUMBER_WA
          value: '{{ required "WA Phone number required for CGS" .Values.twilio.numbers.wa }}'
        - name: TWILIO_NUMBER_SID_IL
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: twilio-number-sid-il
        - name: TWILIO_NUMBER_SID_WA
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: twilio-number-sid-wa

        {{- else }}
        - name: TWILIO_NUMBER
          value: '{{ required "Phone number required if using Twilio" .Values.twilio.number }}'
        - name: TWILIO_NUMBER_SID
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: twilio-number-sid
        {{- end }}

        {{- end }}

        {{- if eq .Release.Namespace "boatload" }}
        - name: BASE_ID
          value: '{{ required "Base ID required to use Airtable" .Values.airtable.base_id }}'
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: secrets-manager
              key: api-key
        {{- end }}

        ports:
        - containerPort: 8000
          name: api-port

      {{- if .Values.db.proxy }}
      - name: proxy
        image: "{{ .Values.db.proxy_version }}"
        imagePullPolicy: Always
        command:
        - /cloud_sql_proxy
        - -instances={{- include "db_project" . -}}:{{- required "Region Required" .Values.google.region -}}:{{- include "instance_name" . }}=tcp:127.0.0.1:5432
        - -enable_iam_login
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
      {{- end }}

{{- end }}



